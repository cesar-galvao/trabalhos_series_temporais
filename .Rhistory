mutate(modelo = str_c(v1,v2,v3)) %>%
select(modelo) %>%
unique() %>%
expand_grid(., damp = c(TRUE, FALSE))
map2_df(model$modelo[1], model$TF[1], criterios)
map2_df(model$modelo[1], model$damp[1], criterios)
map2_df(model$modelo[1], model$damp[1], criterios)
#funcao pra montar indicadores do modelo
criterios <- function(modelo, damp) { #usamos o objeto dados como um padrao
modelo <- try({ets(dados, model = modelo, damped = damp)}, silent = FALSE)
tabela <- tibble(
nome = str_c("ETS(", model, ")"),
damped = damp,
AIC = modelo$aic,
AICc = modelo$aicc,
BIC = modelo$bic)
return(tabela)
}
map2_df(model$modelo[1], model$damp[1], criterios)
criteriosmodel$modelo[1]
model$modelo[1]
model$damp[1]
map2_df(model$modelo, model$damp, criterios)
model$modelo
`%notin%` <- Negate(%in%)
`%notin%` <- Negate(`%in%`)
model$modelo %notin% c("AAM")
# monta as combinações possíveis de modelo ets
model <- expand_grid(v1 = c("A", "M", "N"), v2 = c("A", "M", "N"), v3 = c("A", "M", "N")) %>%
mutate(modelo = str_c(v1,v2,v3)) %>%
select(modelo) %>%
unique() %>%
expand_grid(., damp = c(TRUE, FALSE)) %>%
# N, A, M, + damped
filter(modelo %notin% c("AAM"))
map2_df(model$modelo, model$damp, criterios)
model$modelo
# monta as combinações possíveis de modelo ets
model <- expand_grid(v1 = c("A", "M", "N"), v2 = c("A", "M", "N"), v3 = c("A", "M", "N")) %>%
mutate(modelo = str_c(v1,v2,v3)) %>%
select(modelo) %>%
unique() %>%
expand_grid(., damp = c(TRUE, FALSE)) %>%
# N, A, M, + damped
filter(modelo %notin% c("AAM", "AMA"))
map2_df(model$modelo, model$damp, criterios)
# monta as combinações possíveis de modelo ets
model <- expand_grid(v1 = c("A", "M", "N"), v2 = c("A", "M", "N"), v3 = c("A", "M", "N")) %>%
mutate(modelo = str_c(v1,v2,v3)) %>%
select(modelo) %>%
unique() %>%
expand_grid(., damp = c(TRUE, FALSE)) %>%
# N, A, M, + damped
filter(modelo %notin% c("AAM", "AMA", "AMM"))
map2_df(model$modelo, model$damp, criterios)
model$modelo
criterios(model$modelo[5], model$modelo[5])
criterios(model$modelo[5], model$damp[5])
criterios(model$modelo[4], model$damp[4])
#funcao pra montar indicadores do modelo
criterios <- function(modelo, damp) { #usamos o objeto dados como um padrao
modelo <- try({ets(dados, model = modelo, damped = damp)}, silent = FALSE)
tabela <- tibble(
nome = str_c("ETS(", modelo, ")"),
damped = damp,
AIC = modelo$aic,
AICc = modelo$aicc,
BIC = modelo$bic)
return(tabela)
}
criterios(model$modelo[4], model$damp[4])
criterios(model$modelo[4], model$damp[4])
#funcao pra montar indicadores do modelo
criterios <- function(modelo, damp) { #usamos o objeto dados como um padrao
ETS <- try({ets(dados, model = modelo, damped = damp)}, silent = FALSE)
tabela <- tibble(
nome = str_c("ETS(", modelo, ")"),
damped = damp,
AIC = ETS$aic,
AICc = ETS$aicc,
BIC = ETS$bic)
return(tabela)
}
criterios(model$modelo[4], model$damp[4])
criterios(model$modelo[5], model$damp[5])
for(i in 1:length(model$modelo)){
criterios(model$modelo[i], model$damp[i])
}
for(i in 1:length(model$modelo)){
criterios(model$modelo[i], model$damp[i])
}
1:length(model$modelo)
for(i in 1:length(model$modelo)){
print(i)
criterios(model$modelo[i], model$damp[i])
}
for(i in 1:length(model$modelo)){
print(i)
print(try({criterios(model$modelo[i], model$damp[i])}))
}
for(i in 1:length(model$modelo)){
print(i)
print(try({criterios(model$modelo[i], model$damp[i])}))
}
# monta as combinações possíveis de modelo ets
model <- expand_grid(v1 = c("A", "M", "N"), v2 = c("A", "M", "N"), v3 = c("A", "M", "N")) %>%
mutate(modelo = str_c(v1,v2,v3)) %>%
select(modelo) %>%
unique() %>%
expand_grid(., damp = c(TRUE, FALSE))
#funcao pra montar indicadores do modelo
criterios <- function(modelo, damp) { #usamos o objeto dados como um padrao
ETS <- try({ets(dados, model = modelo, damped = damp)}, silent = FALSE)
tabela <- tibble(
nome = str_c("ETS(", modelo, ")"),
damped = damp,
AIC = ETS$aic,
AICc = ETS$aicc,
BIC = ETS$bic)
return(tabela)
}
for(i in 1:length(model$modelo)){
print(i)
print(try({criterios(model$modelo[i], model$damp[i])}, silent = TRUE))
}
model$modelo[i]
model$damp[i]
for(i in 1:length(model$modelo)){
print(i)
print(try({ets(dados, model = model$modelo[i], damped = model$damp[i])}, silent = TRUE))
}
selecionados <- c(1, 2, 5, 6, 14, 18:24, 27:30, 32, 34, 36)
model_select <- modelo[selecionados,]
selecionados <- c(1, 2, 5, 6, 14, 18:24, 27:30, 32, 34, 36)
selecionados
modelo[selecionados,]
model_select <- modelo[c(selecionados),]
modelo[c(selecionados),]
modelo[c(1, 2, 5, 6),]
modelo[model$modelo[selecionados],]
modelo
model_select <- model[selecionados,]
map2_df(model$modelo, model$damp, ets(dados, .x, .y))
#funcao pra montar indicadores do modelo
criterios <- function(modelo, damp) { #usamos o objeto dados como um padrao
ETS <- try({ets(dados, model = modelo, damped = damp)}, silent = FALSE)
tabela <- tibble(
nome = str_c("ETS(", modelo, ")"),
damped = damp,
AIC = ETS$aic,
AICc = ETS$aicc,
BIC = ETS$bic)
return(tabela)
}
map2_df(model_select$modelo, model_select$damp, ets(dados, .x, .y))
map2_df(model_select$modelo, model_select$damp, criterios)
tabela_modelos_ETS <- map2_df(model_select$modelo, model_select$damp, criterios)
tabela_modelos_ETS
tabela_modelos_ETS <- map2_df(model_select$modelo, model_select$damp, criterios) %>%
sort(desc(AIC))
tabela_modelos_ETS <- map2_df(model_select$modelo, model_select$damp, criterios) %>%
arrange(desc(AIC))
tabela_modelos_ETS
tabela_modelos_ETS <- map2_df(model_select$modelo, model_select$damp, criterios) %>%
arrange(AIC)
tabela_modelos_ETS
?case_when
tabela_modelos_ETS <- map2_df(model_select$modelo, model_select$damp, criterios) %>%
arrange(AIC) %>%
mutate(nome = case_when(
dampep == TRUE ~ str_replace(nome, "A", "Ad"),
.default = nome
))
tabela_modelos_ETS
tabela_modelos_ETS%>%
mutate(nome = case_when(
dampep == TRUE ~ str_replace(nome, "A", "Ad"),
.default = nome
))
tabela_modelos_ETS <- map2_df(model_select$modelo, model_select$damp, criterios) %>%
arrange(AIC) %>%
mutate(nome = case_when(
damped == TRUE ~ str_replace(nome, "A", "Ad"),
.default = nome
))
tabela_modelos_ETS
.model
model
?str_c
# monta as combinações possíveis de modelo ets
model <- expand_grid(v1 = c("A", "M", "N"), v2 = c("A", "M", "N"), v3 = c("A", "M", "N")) %>%
mutate(modelo = str_c(v1,v2,v3), sigla = str_c(v1,v2,v3, sep = ",")) %>%
select(modelo) %>%
unique() %>%
expand_grid(., damp = c(TRUE, FALSE))
model
# monta as combinações possíveis de modelo ets
model <- expand_grid(v1 = c("A", "M", "N"), v2 = c("A", "M", "N"), v3 = c("A", "M", "N")) %>%
mutate(modelo = str_c(v1,v2,v3), sigla = str_c(v1,v2,v3, sep = ",")) %>%
select(modelo) %>%
unique() %>%
expand_grid(., damp = c(TRUE, FALSE))
model
# monta as combinações possíveis de modelo ets
model <- expand_grid(v1 = c("A", "M", "N"), v2 = c("A", "M", "N"), v3 = c("A", "M", "N")) %>%
mutate(modelo = str_c(v1,v2,v3), sigla = str_c(v1,v2,v3, sep = ",")) %>%
select(modelo, sigla) %>%
unique() %>%
expand_grid(., damp = c(TRUE, FALSE))
model
#funcao pra montar indicadores do modelo
criterios <- function(modelo, damp) { #usamos o objeto dados como um padrao
ETS <- try({ets(dados, model = modelo, damped = damp)}, silent = FALSE)
tabela <- tibble(
nome = str_c("ETS(", sigla, ")"),
damped = damp,
AIC = ETS$aic,
AICc = ETS$aicc,
BIC = ETS$bic)
return(tabela)
}
selecionados <- c(1, 2, 5, 6, 14, 18:24, 27:30, 32, 34, 36)
model_select <- model[selecionados,]
tabela_modelos_ETS <- map2_df(model_select$modelo, model_select$damp, criterios) %>%
arrange(AIC) %>%
mutate(nome = case_when(
damped == TRUE ~ str_replace(nome, "A", "Ad"),
.default = nome
))
?imap
#funcao pra montar indicadores do modelo
criterios <- function(modelo, damp) { #usamos o objeto dados como um padrao
ETS <- try({ets(dados, model = modelo, damped = damp)}, silent = FALSE)
tabela <- tibble(
nome = str_c("ETS(", modelo, ")"),
damped = damp,
AIC = ETS$aic,
AICc = ETS$aicc,
BIC = ETS$bic)
return(tabela)
}
model_select
#funcao pra montar indicadores do modelo
criterios <- function(modelo, damp) { #usamos o objeto dados como um padrao
ETS <- try({ets(dados, model = modelo, damped = damp)}, silent = FALSE)
tabela <- tibble(
nome = modelo,
damped = damp,
AIC = ETS$aic,
AICc = ETS$aicc,
BIC = ETS$bic)
return(tabela)
}
tabela_modelos_ETS <- map2_df(model_select$modelo, model_select$damp, criterios) %>%
arrange(AIC)
tabela_modelos_ETS
modelo <- "AAA"
substr(modelo,1,1)
str_c("ETS(", str_c(substr(modelo,1,1),  substr(modelo,2,2), substr(modelo,3,3), sep = ","), ")")
#funcao pra montar indicadores do modelo
criterios <- function(modelo, damp) { #usamos o objeto dados como um padrao
ETS <- try({ets(dados, model = modelo, damped = damp)}, silent = FALSE)
tabela <- tibble(
nome = modelo,
sigla = str_c("ETS(", str_c(substr(modelo,1,1),  substr(modelo,2,2), substr(modelo,3,3), sep = ","), ")"),
damped = damp,
AIC = ETS$aic,
AICc = ETS$aicc,
BIC = ETS$bic)
return(tabela)
}
tabela_modelos_ETS <- map2_df(model_select$modelo, model_select$damp, criterios) %>%
arrange(AIC)
tabela_modelos_ETS
#funcao pra montar indicadores do modelo
criterios <- function(modelo, damp) { #usamos o objeto dados como um padrao
ETS <- try({ets(dados, model = modelo, damped = damp)}, silent = FALSE)
tabela <- tibble(
#nome = modelo,
sigla = str_c("ETS(", str_c(substr(modelo,1,1),  substr(modelo,2,2), substr(modelo,3,3), sep = ","), ")"),
damped = damp,
AIC = ETS$aic,
AICc = ETS$aicc,
BIC = ETS$bic)
return(tabela)
}
tabela_modelos_ETS <- map2_df(model_select$modelo, model_select$damp, criterios) %>%
arrange(AIC)
tabela_modelos_ETS
tabela_modelos_ETS %>%
mutate(modelo = case_when(
damped == TRUE ~ str_replace(sigla, "A", "Ad"),
.default = sigla
))
tabela_modelos_ETS <- map2_df(model_select$modelo, model_select$damp, criterios) %>%
arrange(AIC) %>%
mutate(modelo = case_when(
damped == TRUE ~ str_replace(sigla, "A", "Ad"),
.default = sigla
))%>%
select(modelo, everything(), -sigla)
tabela_modelos_ETS
tabela_modelos_ETS <- map2_df(model_select$modelo, model_select$damp, criterios) %>%
arrange(AIC) %>%
mutate(modelo = case_when(
damped == TRUE ~ str_replace(sigla, "A", "Ad"),
.default = sigla
))%>%
select(modelo, AIC:BIC)
tabela_modelos_ETS
tabela_modelos_ETS <- map2_df(model_select$modelo, model_select$damp, criterios) %>%
arrange(AIC) %>%
mutate(modelo = case_when(
damped == TRUE ~ str_replace(sigla, "A", "Ad"),
.default = sigla
))
tabela_modelos_ETS
#funcao pra montar indicadores do modelo
criterios <- function(modelo, damp) { #usamos o objeto dados como um padrao
ETS <- try({ets(dados, model = modelo, damped = damp)}, silent = FALSE)
tabela <- tibble(
nome = modelo,
sigla = str_c("ETS(", str_c(substr(modelo,1,1),  substr(modelo,2,2), substr(modelo,3,3), sep = ","), ")"),
damped = damp,
AIC = ETS$aic,
AICc = ETS$aicc,
BIC = ETS$bic)
return(tabela)
}
tabela_modelos_ETS <- map2_df(model_select$modelo, model_select$damp, criterios) %>%
arrange(AIC) %>%
mutate(modelo = case_when(
damped == TRUE ~ str_replace(sigla, "A", "Ad"),
.default = sigla
))
tabela_modelos_ETS
pacman::p_load(Mcomp, tidyverse, forecast, fpp2, xts, tseries, tidymodels, kableExtra)
tabela_modelos_ETS
# decomposicao ETS sem transformacao ----
fit_ets <- ets(dados, model = "MAM", damped = TRUE)
plot(fit_ets)
tabela_modelos_ETS %>%
select("Modelo"= modelo, AIC:BIC)%>%
head(10)
dados %>% BoxCox.lambda()
serie %>% BoxCox(lambda)
# ETS com transformação
lambda <- dados %>% BoxCox.lambda()
serie %>% BoxCox(lambda)
dados %>% BoxCox(lambda)
# avalia valor de lambda da transformacao boxcox
lambda <- dados %>% BoxCox.lambda()
dados_box <- dados %>% BoxCox(lambda)
# Visualização e decomposição da ETS com transformação
plot(dados_box,main="Serie com\ntransformacao de Box-Cox")
mstl(serie_box)%>%plot()
mstl(dados_box)%>%plot()
# visualização e decomp da ETS com transformação
plot(dados_box,main="Serie com\ntransformacao de Box-Cox")
# visualização e decomp da ETS com transformação
plot(dados_box,main="Serie com transformacao de Box-Cox")
# visualização e decomp da ETS com transformação
plot(dados_box,main= parse(text = paste0('"Série com transformação Box-Cox"', '~ \lambda == ', lambda)))
# visualização e decomp da ETS com transformação
plot(dados_box,main= parse(text = paste0('"Série com transformação Box-Cox"', '~ lambda == ', lambda)))
# avalia valor de lambda da transformacao boxcox
lambda <- dados %>% BoxCox.lambda()
dados_box <- dados %>% BoxCox(lambda)
# visualização e decomp da ETS com transformação
plot(dados_box,main= parse(text = paste0('"Série com transformação Box-Cox -"', '~ lambda == ', lambda)))
# avalia valor de lambda da transformacao boxcox
lambda <- dados %>% BoxCox.lambda()
dados_box <- dados %>% BoxCox(lambda)
# visualização e decomp da ETS com transformação
plot(dados_box,main= parse(text = paste0('"Série com transformação Box-Cox -"', '~ lambda == ', round(lambda, 3))))
mstl(dados_box)%>%plot()
mstl(dados_box)%>%plot(main = "Decomposição da série com transformação Box-Cox")
model
melhor_AICc <- Inf
for(p in 0:2){
for(q in 0:2){
for(P in 0:2){
for(Q in 0:2){
fit <- Arima(serie_ms, order=c(p,1,q), seasonal=c(P,1,Q))
if(fit$aicc <= melhor_AICc){
melhor_AICc <- fit$aicc
cat("p =",p,", q =",q,", P =",P,", Q =",Q,", AICc =",fit$aicc,"\n")
}
}
}
}
}
# Criterio de Akaike
melhor_AICc <- Inf
for(p in 0:2){
for(q in 0:2){
for(P in 0:2){
for(Q in 0:2){
tryCatch({fit <- Arima(serie_ms, order=c(p,1,q), seasonal=c(P,1,Q))
if(fit$aicc <= melhor_AICc){
melhor_AICc <- fit$aicc
cat("p =",p,", q =",q,", P =",P,", Q =",Q,", AICc =",fit$aicc,"\n")})
# Criterio de Akaike
melhor_AICc <- Inf
for(p in 0:2){
for(q in 0:2){
for(P in 0:2){
for(Q in 0:2){
tryCatch({fit <- Arima(serie_ms, order=c(p,1,q), seasonal=c(P,1,Q))
if(fit$aicc <= melhor_AICc){
melhor_AICc <- fit$aicc
cat("p =",p,", q =",q,", P =",P,", Q =",Q,", AICc =",fit$aicc,"\n")}
})
}
}
}
}
# Criterio de Akaike
melhor_AICc <- Inf
for(p in 0:2){
for(q in 0:2){
for(P in 0:2){
for(Q in 0:2){
tryCatch({fit <- Arima(serie_ms, order=c(p,1,q), seasonal=c(P,1,Q))
if(fit$aicc <= melhor_AICc){
melhor_AICc <- fit$aicc
cat("p =",p,", q =",q,", P =",P,", Q =",Q,", AICc =",fit$aicc,"\n")}
})
}
}
}
}
# Criterio de Akaike
melhor_AICc <- Inf
for(p in 0:2){
for(q in 0:2){
for(P in 0:2){
for(Q in 0:2){
tryCatch({fit <- Arima(serie_ms, order=c(p,1,q), seasonal=c(P,1,Q))}, errorerror=function(e){cat("ERROR :",conditionMessage(e), "\n")})
if(fit$aicc <= melhor_AICc){
melhor_AICc <- fit$aicc
cat("p =",p,", q =",q,", P =",P,", Q =",Q,", AICc =",fit$aicc,"\n")}
}
}
}
}
# Criterio de Akaike
melhor_AICc <- Inf
for(p in 0:2){
for(q in 0:2){
for(P in 0:2){
for(Q in 0:2){
cat("p =",p,", q =",q,", P =",P,", Q =",Q)
tryCatch({fit <- Arima(serie_ms, order=c(p,1,q), seasonal=c(P,1,Q))}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
if(fit$aicc <= melhor_AICc){
melhor_AICc <- fit$aicc
cat("p =",p,", q =",q,", P =",P,", Q =",Q,", AICc =",fit$aicc,"\n")}
}
}
}
}
# Criterio de Akaike
melhor_AICc <- Inf
for(p in 0:2){
for(q in 0:2){
for(P in 0:2){
for(Q in 0:2){
cat("p =",p,", q =",q,", P =",P,", Q =",Q,"\n")
tryCatch({fit <- Arima(serie_ms, order=c(p,1,q), seasonal=c(P,1,Q))}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
if(fit$aicc <= melhor_AICc){
melhor_AICc <- fit$aicc
cat("p =",p,", q =",q,", P =",P,", Q =",Q,", AICc =",fit$aicc,"\n")}
}
}
}
}
for(i in 1:length(model$modelo)){
print(i)
print(try({ets(dados, model = model$modelo[i], damped = model$damp[i])}, silent = TRUE))
}
for(i in 1:length(model$modelo)){
print(i)
print(try({ets(dados, model = model$modelo[i], damped = model$damp[i])}, silent = TRUE))
}
selecionados_transf <- c(1, 2, 5, 6, 14, 18, 19:24, 27:30, 32, 34, 36)
selecionados_transf <- c(1, 2, 5, 6, 14, 18, 19:24, 27:30, 32, 34, 36)
model_select_transf <- model[selecionados_transf,]
model_select_transf
tabela_modelos_ETS_transf <- map2_df(model_select_transf$modelo, model_select_transf$damp, criterios) %>%
arrange(AIC) %>%
mutate(modelo = case_when(
damped == TRUE ~ str_replace(sigla, "A", "Ad"),
.default = sigla
))
tabela_modelos_ETS_transf
# decomposicao ETS sem transformacao ----
fit_ets <- ets(dados, model = "MAM", damped = TRUE)
plot(fit_ets, main = "Decomposição ETS(M, Ad, M)")
model
for(i in 1:length(model$modelo)){
print(i)
print(try({ets(dados_box, model = model$modelo[i], damped = model$damp[i])}, silent = TRUE))
}
for(i in 1:length(model$modelo)){
print(i)
print(try({ets(dados_box, model = model$modelo[i], damped = model$damp[i])}, silent = TRUE))
}
# avalia valor de lambda da transformacao boxcox
lambda <- dados %>% BoxCox.lambda()
dados_box <- dados %>% BoxCox(lambda)
# visualização e decomp da ETS com transformação
plot(dados_box,main= parse(text = paste0('"Série com transformação Box-Cox  "', '~ lambda == ', round(lambda, 3))))
